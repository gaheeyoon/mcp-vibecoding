/**
 * 구글 스프레드시트 자동 메일 발송 스크립트
 *
 * [기능]
 * - 구글 스프레드시트의 특정 칼럼(Y)에 있는 체크박스를 클릭하면 해당 행의 정보를 바탕으로 메일을 자동으로 발송합니다.
 * - 메일 발송 성공 여부, 실패 시 원인 등을 상태 칼럼(Z)에 기록합니다.
 * - 이메일 주소 유효성을 검사하고, 여러 수신자에게 한 번에 발송할 수 있습니다.
 *
 * [칼럼 구성]
 * - E 칼럼: 받는 사람 이메일 (쉼표(,)로 여러 명 지정 가능)
 * - W 칼럼: 메일 제목
 * - X 칼럼: 메일 본문 (HTML 형식 지원)
 * - Y 칼럼: 발송 체크 (체크박스)
 * - Z 칼럼: 발송 상태 (발송 중, 발송 완료, 발송 실패 등)
 */

function handleEdit(e) {
  if (!e || !e.range) {
    console.log('이벤트 객체가 없습니다. 수동 실행이 아닌 셀 편집을 통해 실행해주세요.');
    return;
  }

  const range = e.range;
  const sheet = range.getSheet();
  const row = range.getRow();
  const col = range.getColumn();

  // Y 칼럼(25번째 칼럼)의 체크박스가 편집되었는지 확인
  if (col === 25) { // Y 칼럼
    const checkboxValue = range.getValue();

    if (checkboxValue === true) {
      sendEmailFromRow(sheet, row);
    }
  }
}

function sendEmailFromRow(sheet, row) {
  try {
    // 각 칼럼에서 데이터 읽기
    const recipientEmails = sheet.getRange(row, 5).getValue();  // E 칼럼 (받는 사람)
    const senderName = '위키북스(박찬규)';                          // 보내는 사람 이름 (고정값)
    const subject = sheet.getRange(row, 23).getValue();         // W 칼럼 (메일 제목)
    const htmlBody = sheet.getRange(row, 24).getValue();        // X 칼럼 (메일 본문)

    if (!recipientEmails || !subject || !htmlBody) {
      sheet.getRange(row, 26).setValue("발송 실패: 필수 정보 누락");  // Z 칼럼
      sheet.getRange(row, 25).setValue(false);                  // Y 칼럼 체크박스 해제
      return;
    }

    const emailArray = recipientEmails.split(',').map(email => email.trim()).filter(email => email.length > 0);
    const invalidEmails = emailArray.filter(email => !isValidEmail(email));

    if (invalidEmails.length > 0) {
      sheet.getRange(row, 26).setValue(`발송 실패: 잘못된 형식의 이메일 포함 (${invalidEmails.join(', ')})`);
      sheet.getRange(row, 25).setValue(false);                  // Y 칼럼 체크박스 해제
      return;
    }

    sheet.getRange(row, 26).setValue("발송 중...");               // Z 칼럼

    // 메일 발송 옵션 설정
    const mailOptions = {
      htmlBody: htmlBody, // HTML 본문 사용
      name: senderName    // 보내는 사람 이름 설정
    };

    // MailApp -> GmailApp 으로 변경하여 메일 발송
    GmailApp.sendEmail(recipientEmails, subject, '', mailOptions);

    const currentTime = new Date().toLocaleString('ko-KR');
    sheet.getRange(row, 26).setValue(`발송 완료 (${currentTime})`); // Z 칼럼
    sheet.getRange(row, 25).setValue(false);                      // Y 칼럼 체크박스 해제

    console.log(`메일 발송 완료 - 받는 사람: ${recipientEmails}, 제목: ${subject}`);

  } catch (error) {
    console.error('메일 발송 오류:', error);
    sheet.getRange(row, 26).setValue(`발송 실패: ${error.toString()}`);
    sheet.getRange(row, 25).setValue(false);                      // Y 칼럼 체크박스 해제
  }
}

function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// 최초 실행 시 권한을 요청하기 위한 함수
function requestPermissions() {
  SpreadsheetApp.getActiveSheet();
  
  // GmailApp의 권한을 요청하기 위해 실제 존재하는 함수(getAliases)를 호출합니다.
  // 이 함수는 단순히 권한 팝업을 띄우는 용도로만 사용됩니다.
  GmailApp.getAliases(); 
  
  console.log('권한 요청 완료. 이제 메일 발송이 가능합니다.');
}

// 특정 행에 대해 테스트 메일을 발송하는 함수
function testSendEmail() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const testRow = 2; // 테스트할 행 번호
  console.log('테스트 메일 발송을 시작합니다...');
  sendEmailFromRow(sheet, testRow);
}

// 시트의 헤더와 체크박스를 설정하는 초기 설정 함수
function setupSheet() {
  const sheet = SpreadsheetApp.getActiveSheet();
  sheet.getRange('E1').setValue('받는 사람');
  sheet.getRange('W1').setValue('메일제목');
  sheet.getRange('X1').setValue('메일본문');
  sheet.getRange('Y1').setValue('발송체크');
  sheet.getRange('Z1').setValue('발송 상태');
  const checkboxRange = sheet.getRange('Y2:Y100');
  checkboxRange.insertCheckboxes();
  console.log('스프레드시트 초기 설정 완료');
}


